#!/usr/bin/env python

import glob
import logging
import os
import re
import sys
from dataclasses import dataclass
from datetime import datetime
from itertools import chain
from operator import itemgetter

import pyocr
import pyocr.builders
from money import Money
from pdf2image import convert_from_path
from PIL import Image

logger = logging.getLogger(__name__)
logger.setLevel(logging.DEBUG)
logger.addHandler(logging.StreamHandler(sys.stdout))


@dataclass
class Purchase:
    """
    Rich data type for provider agnostic purchases
    """
    date: datetime
    vendor: str
    cost: Money

    @classmethod
    def chase(cls, date, vendor, cost):
        return cls(
            datetime.strptime(f"{date}/20", "%m/%d/%y"), # FIXME: Hardcoded year
            re.sub(r'([0-9]+)', '', vendor.strip()), # Strip digits for better coalescing
            Money(amount=cost, currency="USD"),
        )

    @classmethod
    def barclays(cls, date, vendor, cost):
        return cls(
            datetime.strptime(f"{date} 20", "%b %d %y"), # FIXME: Hardcoded year
            re.sub(r'([0-9]+)', '', vendor.strip()), # Strip digits for better coalescing
            Money(amount=cost, currency="USD"),
        )



def process_pdfs(input_glob, output_dir):
    """
    Convert PDFs to JPGs
    """
    for abspath in glob.glob(input_glob):
        filename = os.path.basename(abspath)
        logger.info("Converting %s...", filename)
        convert_from_path(
            abspath,
            fmt='jpeg',
            output_folder=output_dir,
            output_file=os.path.splitext(filename)[0],
        )


def process_jpgs(input_glob, output_dir):
    """
    Perform OCR on JPGs
    """
    # The tools are returned in the recommended order of usage
    tool = pyocr.get_available_tools()[0]
    logger.info("Will use tool '%s'", tool.get_name())

    langs = tool.get_available_languages()
    logger.info("Available languages: %s", ", ".join(langs))
    lang = langs[0]
    logger.info("Will use lang '%s'", lang)

    for image in glob.glob(input_glob):
        logger.info("Processing %s...", image)
        text = tool.image_to_string(
            Image.open(image),
            lang=lang,
            builder=pyocr.builders.TextBuilder()
        )
        filename = os.path.basename(os.path.splitext(image)[0])
        with open(f"{output_dir}/{filename}.txt", "w") as output:
            output.write(text)


def parse_chase_text(input_glob):
    """
    Model purchases from text input
    """
    date_regex = r'^([0-9]{2}\/[0-9]{2})'
    price_regex = r'\s([0-9]{1,5}\.[0-9]{2})$'
    patterns = {
        "date": re.compile(date_regex),
        "price": re.compile(price_regex),
    }
    purchases = []
    for text_file in glob.glob(input_glob):
        with open(text_file, "r") as text:
            for line in text:
                date_test = patterns["date"].findall(line)
                price_test = patterns["price"].findall(line)
                if date_test and price_test:
                    purchases.append(Purchase.chase(
                        date_test[0],
                        re.sub(date_regex, '', re.sub(price_regex, '', line)),
                        price_test[0],
                    ))
    return purchases


def parse_barclays_text(input_glob):
    """
    Model purchases from text input
    """
    date_regex = r'^([A-Z][a-z]{2}\s[0-9]{2})'
    price_regex = r'\s\$([0-9]{1,5}\.[0-9]{2})$'
    patterns = {
        "date": re.compile(date_regex),
        "price": re.compile(price_regex),
    }
    purchases = []
    for text_file in glob.glob(input_glob):
        with open(text_file, "r") as text:
            for line in text:
                date_test = patterns["date"].findall(line)
                price_test = patterns["price"].findall(line)
                if date_test and price_test:
                    vendor = re.sub(
                        price_regex,
                        '',
                        re.sub(
                            date_regex,
                            '',
                            re.sub(date_regex, '', line).strip()
                        )
                    )
                    purchases.append(Purchase.barclays(
                        date_test[0],
                        vendor,
                        price_test[0],
                    ))
    return purchases


def cost_by_vendor(purchases):
    unique_vendors = {}
    for purchase in purchases:
        subtotal = unique_vendors.get(
            purchase.vendor,
            Money(amount="0", currency=purchase.cost.currency)
        )
        subtotal = subtotal + purchase.cost
        unique_vendors[purchase.vendor] = subtotal
    return {k: v for k, v in sorted(unique_vendors.items(), key=itemgetter(1))}


def total_cost(purchases):
    total = {}
    for purchase in purchases:
        c = purchase.cost.currency
        subtotal = total.get(c, Money(amount="0", currency=c))
        subtotal = subtotal + purchase.cost
        total[c] = subtotal
    return total


def main():
    temp_dir = "/tmp/btk"
    os.makedirs(temp_dir, exist_ok=True)

    process_pdfs(f"/opt/btk/pdf/*.pdf", temp_dir)
    process_jpgs(f"{temp_dir}/*.jpg", temp_dir)
    purchases = parse_chase_text(f"{temp_dir}/chase*.txt")
    purchases.extend(parse_barclays_text(f"{temp_dir}/barclays*.txt"))
    vendors = cost_by_vendor(purchases)
    for vendor, cost in vendors.items():
        logger.info("%s %8.2f %s", cost.currency, cost.amount, vendor)
    totals = total_cost(purchases)
    for currency, total in totals.items():
        logger.info("%s %8.2f ==∙∙=== TOTAL ===∙∙==", currency, total)


if __name__ == "__main__":
    sys.exit(main())
